<?php
	// Sample PHP to demonstrate using the REDIS_Cache_Controller API

	define("REDIS", true);					// Switch caching on or off
	// Help you debug
	error_reporting(E_ALL & ~E_NOTICE & ~E_WARNING);
	ini_set('display_errors', 1);

	// Include this loader at the beginning of your page's execution, and your page will be managed by the
	// cache controller.
	require_once("redis_cache_controller/loader.php");
	
	// If the rest of this page's code is executing, then the controller did not return a cached copy.
	// So code away...  connect to databases, make your server(s) grunt and sweat.  No worries...
	// The resulting content will be cached by the controller (it is still oberving and buffering everything)
	// so the next time this URL is hit your users will get back a cached copy.

	sleep(3);	// Simulate a long-running process

?>
<!DOCTYPE html>
<html>
  <head>
	<title>Sample content managed by PHP Redis Cache Controller</title>
  </head>
  <body>
	<h1>Sample content managed by PHP Redis Cache Controller</h1>
	<p>This page was generated by a sample PHP app.</p>
	<p>View the source to see the current cache status for this page.  The cache controller will embed
	a special section in the head indicating cache status.  Example:</p>
	<pre>
		&lt;meta name="application-name" content="My Test App"
			data-Cache-SetName="default"
			data-Cache-SetKey="408694b90268e80b650788d627d113b2"
			data-Cache-ItemKey="48e3e6ebed42a40e1070a47116e23d65"
			data-Cache-db="1"
			data-Cache-duration="0.0038509368896484"
			data-Cache-Content-Created="Fri, 03 Jan 14 13:38:35 +0000"
			data-Cache-Entry-Expires="Tue, 07 Jan 14 01:38:35 +0000"
			data-Cache-Status="cached"
			/&gt;
	</pre>
	<p>The cache controller will look for tokens embedded in your HTML stream and will evaluate them when
	it renders content from the cache.  This is useful for displaying cache stats and information.  You implement a token
	in your HTML as a &lt;span&gt; having a class with the appropriate token name.  Example: &lt;span class="RCC-cache-status your-classes"&gt;&lt;/span&gt;
	The cache controller will insert the appropriate value into that span.</p>
	<table>
		<thead>
			<tr>
				<th>Token</th>
				<th>Description</th>
				<th>Value (evaluated by cache controller)</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>RCC-cache-status</td>
				<td>Cache status</td>
				<td><span class="RCC-cache-status"></span></td>
			</tr>
			<tr>
				<td>RCC-cache-expires</td>
				<td>Cache expires</td>
				<td><span class="RCC-cache-expires"></span></td>
			</tr>
			<tr>
				<td>RCC-cache-generated</td>
				<td>Cache generated</td>
				<td><span class="RCC-cache-generated"></span></td>
			</tr>
			<tr>
				<td>RCC-cache-duration</td>
				<td>Content generation time</td>
				<td><span class="RCC-cache-duration"></span> seconds</td>
			</tr>
			<tr>
				<td>RCC-cache-key</td>
				<td>Redis key</td>
				<td><span class="RCC-cache-key"></span></td>
			</tr>
			<tr>
				<td>RCC-cache-set</td>
				<td>Redis set key</td>
				<td><span class="RCC-cache-set"></span></td>
			</tr>
		</tbody>
	</table>
  </body>
</html>